AnyType
=======

The ``AnyType`` class represents runtime introspectable types for empty, scalar, structured or array
values. Objects of this type respect value semantics and can easily be passed or returned by value.

.. contents::
   :local:

Architecture
------------

.. image:: /images/AnyType_classes.png

Construction
------------

Typically, ``AnyType`` objects are created in one of two ways:

* Statically: they are encoded directly by the programmer.
* Dynamically: the types runtime generated by parsing some other data structure.

To accomodate for these different use cases, the ``AnyType`` class provides different options to
create a specific type object.

Empty type
^^^^^^^^^^

The empty type is provided as a default null type, meaning that corresponding values do not contain
any data.

Empty types can be created by copying a global constant object ``EmptyType`` or by using the default
``AnyType`` constructor::

   // Use the globally defined (const) EmptyType:
   auto empty_type = EmptyType;

   // Use default constructor to create an empty type:
   AnyType empty_type{};

Scalar types
^^^^^^^^^^^^

Scalar types provide the elementary building blocks of all ``AnyType`` objects. Their
corresponding value objects contain a single arithmetic type (including booleans) or a
string.

Similar to the empty type, scalar types can be constructed in one of two ways.

they can be directly copied from a constant global ``AnyType`` object::

   // Create a boolean type:
   auto bool_type = Boolean;

The ``AnyType.h`` header currently defines the following global constant scalar type objects (the
numbers in the identifiers refer to the bit length of the corresponding values)::

   extern const AnyType Boolean;
   extern const AnyType Character8;
   extern const AnyType SignedInteger8;
   extern const AnyType UnsignedInteger8;
   extern const AnyType SignedInteger16;
   extern const AnyType UnsignedInteger16;
   extern const AnyType SignedInteger32;
   extern const AnyType UnsignedInteger32;
   extern const AnyType SignedInteger64;
   extern const AnyType UnsignedInteger64;
   extern const AnyType Float32;
   extern const AnyType Float64;
   extern const AnyType String;

Alternatively, scalar types can be constructed by passing a ``TypeCode`` enumerator, denoting the
scalar type, to the constructor::

   // Create an unsigned 16-bit integer type:
   AnyType uint16_type(TypeCode::UInt16);

The following scalar type enumerators are supported:

.. enumerator:: TypeCode::Bool

   Boolean type, corresponding to ``true``/``false`` values.

.. enumerator:: TypeCode::Char8

   8-bit character (undefined signedness)

.. enumerator:: TypeCode::Int8
.. enumerator:: TypeCode::Int16
.. enumerator:: TypeCode::Int32
.. enumerator:: TypeCode::Int64

   Signed integer types with the given number of bits.

.. enumerator:: TypeCode::UInt8
.. enumerator:: TypeCode::UInt16
.. enumerator:: TypeCode::UInt32
.. enumerator:: TypeCode::UInt64

   Unsigned integer types with the given number of bits.

.. enumerator:: TypeCode::Float32
.. enumerator:: TypeCode::Float64

   Floating point types with 32 and 64 bits respectively.

.. enumerator:: TypeCode::String

   Type representing character strings.
